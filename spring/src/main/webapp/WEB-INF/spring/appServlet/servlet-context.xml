<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<!-- annotation-driven : @Controller 어노테이션으로 등록된 Command Controller
	클래스의 메소드를 요청처리 메소드로 자동 매핑되도록 설정하는 엘리먼트 -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<!-- resources : 요청에 대한 매핑 처리 없이 직접 응답 처리되도록 설정하는 엘리먼트 -->
	<!-- location 속성 : 리소스 파일이 존재하는 디렉토리 경로를 속성값으로 설정 -->
	<!-- mapping 속성 : 리소스 파일을 요청할 수 있는 URL 패턴을 속성값으로 설정 -->
	<!-- <resources mapping="/resources/**" location="/resources/" />  -->
	<resources mapping="/css/**" location="/resources/css/" />
	<resources mapping="/js/**" location="/resources/js/" />
	<resources mapping="/images/**" location="/resources/images/" />
	<resources mapping="/file/**" location="/resources/file/" />

	<!-- BeanNameViewResolver : Spring Bean의 메소드를 실행하여 기능을 제공하는 ViewResolver -->
	<!-- => 출력 목적이 아닌 실행을 목적으로 하는 ViewResolver -->
	<!-- => 출력 목적인 ViewResolver 보다 우선순위가 높아야 된다. -->
	<beans:bean class="org.springframework.web.servlet.view.BeanNameViewResolver">
		<beans:property name="order" value="1"/>
	</beans:bean>

	<!-- UrlBasedViewResolver : Spring Framework에서 제공하는 ViewResolver를
	사용하지 않고 외부에서 제공하는 ViewResolver를 사용할 수 있는 기능을 제공 클래스 -->
	<beans:bean class="org.springframework.web.servlet.view.UrlBasedViewResolver">
		<!-- viewClass 필드에 TilesView 클래스 경로를 인젝션 -->
		<beans:property name="viewClass" value="org.springframework.web.servlet.view.tiles3.TilesView"/>
		<!-- order 필드에 정수값을 인젝션 -->
		<!-- => ViewResolver의 우선순서를 설정하는 필드 -->
		<!-- => 전달된 정수값이 낮을수록 우선 순위가 높아 먼저 실행 -->
		<beans:property name="order" value="2"/>	
	</beans:bean>		
	
	<!-- TilesConfigurer : Tiles에서 사용할 뷰페이지 정보를 제공하는 XML 파일을 저장하는 클래스 -->
	<beans:bean class="org.springframework.web.servlet.view.tiles3.TilesConfigurer">
		<!-- definitions 필드(List)에 XML 파일들을 인젝션 처리 -->
		<beans:property name="definitions">
			<beans:list>
				<beans:value>/WEB-INF/spring/appServlet/tiles.xml</beans:value>
			</beans:list>
		</beans:property>
	</beans:bean>

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<!-- bean : 클래스를 Spring Bean으로 등록하는 엘리먼트 --> 
	<!-- InternalResourceViewResolver : 요청 처리 메소드를 호출하여 반환된  
	ViewName를 JSP 문서로 변환하여 제공하는 클래스 -->
	<!-- => 우선순위를 가장 낮게 설정하는 것을 권장 -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<!-- property : Setter 메소드를 이용하여 클래스에 값 또는 Spring Bean을 인젝션 처리하는 엘리먼트 -->
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
		<beans:property name="order" value="3"/>	
	</beans:bean>
	
	<!-- component-scan : 패키지에 존재하는 모든 클래스의 어노테이션을 검색하여 처리하는 엘리먼트 -->
	<!-- <context:component-scan base-package="site.itwill.controller"/> -->
	<context:component-scan base-package="site.itwill10.controller"/>
	<context:component-scan base-package="site.itwill10.dao"/>
	<context:component-scan base-package="site.itwill10.service"/>
	
	<!-- AOP 기능을 이용한 트렌젝션 처리 -->
	<!-- advice : Spring Bean으로 등록된 TransactionManager 클래스로 Advice 기능을 제공하는 엘리먼트 -->
	<!-- transaction-manager 속성 : TransactionManager 클래스의 beanName을 속성값으로 설정 -->
	<!-- <tx:advice id="txAdvice" transaction-manager="transactionManager"> -->
		<!-- attributes : 트렌젹션 처리 관련 설정정보를 제공하는 엘리먼트 -->
		<!-- <tx:attributes> -->
			<!-- method : 트렌젝션 처리 메소드를 설정하는 엘리먼트 -->
			<!-- name 속성 : 메소드 패턴을 속성값으로 설정 -->
			<!-- rollback-for 속성 : ROLLBACK 명령을 실행하기 위한 예외클래스를 속성값으로 설정 -->
			<!-- read-only 속성 : 읽기 전용 메소드인 경우 true를 속성값으로 설정 -->
			<!-- <tx:method name="add*" rollback-for="Exception"/> -->
			<!-- <tx:method name="erase*" rollback-for="Exception"/> -->
			<!-- <tx:method name="get*" read-only="true"/> -->
		<!-- </tx:attributes> -->
	<!-- </tx:advice> -->
	
	<!-- TransactionManager를 이용하여 생성된 Advice를 이용하여 AspectJ 기능으로 AOP 설정 -->
	<!--  
	<aop:config>
		<aop:advisor advice-ref="txAdvice" 
			pointcut="execution(* site.itwill10.service.BoardPointService.*(..))"/>
	</aop:config>
	-->
	
	<!-- 파일 업로드 기능을 제공하는 클래스를 Spring Bean 등록 -->
	<!-- => beanName은 반드시 "multipartResolver"로 설정 -->
	<beans:bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<!-- maxUploadSize : 업로드 파일의 용량 제한값(Byte)을 인젝션 처리 -->
		<!-- => 속성값으로 -1을 인젝션 하면 무제한으로 파일 업로드 가능 -->
		<beans:property name="maxUploadSize" value="20971520"/>
		<!-- defaultEncoding : 입력값에 대한 캐릭터셋의 인코딩을 인젝션 처리 -->
		<beans:property name="defaultEncoding" value="UTF-8"/>
	</beans:bean>

	<!-- 파일 다운로드 기능을 제공하는 클래스를 Spring Bean으로 등록 -->
	<beans:bean id="fileDownload" class="site.itwill10.util.FileDownload"/>
	
	<!-- 인터셉터 관련 클래스를 Spring Bean으로 등록 -->
	<beans:bean id="adminAuthInterceptor" class="site.itwill10.util.AdminAuthInterceptor"/>
	<beans:bean id="loginAuthInterceptor" class="site.itwill10.util.LoginAuthInterceptor"/>
	
	<!-- interceptors : 인터셉터를 설정하기 위한 상위 엘리먼트 -->
	<interceptors>
		<!-- interceptor : 인터셉터 등록을 위한 상위 엘리먼트 -->
		<interceptor>
			<!-- mapping : 인터셉터 클래스의 메소드를 호출하기 위한 URL 자원 등록하는 엘리먼트 -->
			<!-- path 속성 : 클라이언트 요청 URL 주소를 속성값으로 설정 -->
			<mapping path="/userinfo/list"/>
			<mapping path="/userinfo/view"/>
			<mapping path="/userinfo/modify"/>
			<!-- ref : 클라이언트 요청에 대한 인터셉터 클래스를 설정하는 엘리먼트 -->
			<!-- bean 속성 : 인터셉터 클래스의 Spring beanName를 속성값으로 설정 -->
			<beans:ref bean="loginAuthInterceptor"/>
		</interceptor>
		
		<interceptor>
			<mapping path="/userinfo/join"/>
			<mapping path="/userinfo/remove"/>
			<beans:ref bean="adminAuthInterceptor"/>
		</interceptor>
	</interceptors>
</beans:beans>