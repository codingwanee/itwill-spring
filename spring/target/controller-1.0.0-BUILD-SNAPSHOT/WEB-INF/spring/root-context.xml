<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">
	
	<!-- Root Context: defines shared resources visible to all other web components -->
	<!-- 컨테스트의 모든 자원에게 제공될 Spring Bean에 대한 Bean Configuration File -->
	
	<!-- DAO 클래스 작성에 필요한 클래스들을 Spring Bean으로 등록 -->
	<!-- => DataSource, JdbcTemplate, SqlSessionFactory, SqlSession, TransactionManager 등 -->
	
	<!-- DataSource 관련 클래스를 Spring Bean으로 등록 -->
	<!--  
	<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="oracle.jdbc.driver.OracleDriver"/>
		<property name="url" value="jdbc:oracle:thin:@localhost:1521:xe"/>
		<property name="username" value="scott"/>
		<property name="password" value="tiger"/>
	</bean>
	-->
	
	<!-- DataSource 관련 클래스를 Spring Bean으로 등록 -->
	<!-- => log4jdbc-log4j2-jdbc4 라이브러리의 클래스를 이용  -->
	<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="net.sf.log4jdbc.sql.jdbcapi.DriverSpy"/>
		<property name="url" value="jdbc:log4jdbc:oracle:thin:@localhost:1521:xe"/>
		<property name="username" value="scott"/>
		<property name="password" value="tiger"/>
	</bean>	
	
	<!-- SqlSessionFactory 관련 클래스를 Spring Bean으로 등록 -->
	<bean id="sqlSessionFactoryBean" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- configLocation 필드 : Mybatis 환경설정 파일의 경로를 인젝션 -->
		<!-- => WebApplicationContext(Spring Container) 인스턴스는 webapp 디렉토리(/)의 자원만 접근 가능 -->
		<!-- <property name="configLocation" value="/WEB-INF/spring/mybatis-config.xml"/> -->
		<!-- classpath 네임스페이스를 이용하여 패키지 폴더에 접근 가능 -->
		<property name="configLocation" value="classpath:/mybatis-config.xml"/>
		<!-- dataSource 필드 : DataSource 관련 Spring Bean을 인젝션(DI) -->
		<property name="dataSource" ref="dataSource"/>
		<!-- typeAliasesPackage 필드 : TypeAlias 기능을 제공할 패키지 경로를 인젝션 -->
		<property name="typeAliasesPackage" value="site.itwill10.dto"/>
		<!-- mapperLocations 필드(List) : Mapper 파일들의 경로를 인젝션 -->
		<property name="mapperLocations">
			<list>
				<!-- 와일드 문자(*)를 이용하여 XML Mapper 파일 등록 -->
				<!-- WebApplicationContext(Spring Container) 인스턴스는	
				src 및 resources 패키지 폴더에 접근 불가능 -->
				<!-- => classpath Namespace를 이용하여 접근 -->
				<value>classpath:site/itwill10/mapper/*.xml</value>
			</list>
		</property>
	</bean>
	
	<!-- SqlSession 관련 클래스를 Spring Bean으로 등록 -->
	<!-- destroy-method 속성의 속성값으로 clearCache 설정 -->
	<!-- => SqlSession 관련 Spring Bean 소멸 전 clearCache() 메소드 호출 -->
	<!-- SqlSessionTemplate.clearCache() : SqlSession 관련 Spring Bean를 제거하는 메소드 - SqlSession.close() 동일 -->
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate" destroy-method="clearCache">
		<!-- SqlSessionFactory 관련 Spring Bean을 생성자를 이용하여 인젝션  -->	
		<constructor-arg ref="sqlSessionFactoryBean"/>	
	</bean>
	
	<!-- TransactionManager 관련 클래스를 Spring Bean으로 등록 -->
	<!-- => beanName를 반드시 transactionManager로 설정 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<!-- dataSource 필드 : DataSource 관련 Spring Bean을 인젝션(DI) -->
		<property name="dataSource" ref="dataSource"/>
	</bean>
	
	<!-- annotation-driven : @Transactional 어노테이션을 이용하여 자동으로
	트렌젝션 처리되도록 설정하는 엘리먼트 -->
	<tx:annotation-driven/>
</beans>







