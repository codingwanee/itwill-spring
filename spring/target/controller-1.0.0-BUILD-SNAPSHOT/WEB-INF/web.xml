<?xml version="1.0" encoding="UTF-8"?>
<web-app version="2.5" xmlns="http://java.sun.com/xml/ns/javaee"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee https://java.sun.com/xml/ns/javaee/web-app_2_5.xsd">
	<!-- Filter 클래스를 필터로 등록하여 URL 주소를 매핑하여 동작되도록 설정 -->
	<!-- Filter 클래스 : 요청 전 또는 응답 후 처리될 명령을 설정하는 클래스 -->
	<!-- CharacterEncodingFilter 클래스 : Spring Framework에서 제공하는 인코딩 필터 클래스 -->
	<!-- => 요청처리 전 HttpRequest 인스턴스에 대한 캐릭터셋을 변경 -->
	<filter>
		<filter-name>encodingFilter</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		<init-param>
			<param-name>encoding</param-name>
			<param-value>UTF-8</param-value>
		</init-param>
	</filter>
	
	<filter-mapping>
		<filter-name>encodingFilter</filter-name>
		<!-- 클라이언트의 모든 요청에 대해 필터가 동작되도록 설정 -->
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	
	<servlet>
		<servlet-name>mvcServlet</servlet-name>
		<servlet-class>site.itwill09.mvc.DispatcherServlet</servlet-class>
		<load-on-startup>0</load-on-startup>
	</servlet>
	
	<servlet-mapping>
		<servlet-name>mvcServlet</servlet-name>
		<url-pattern>*.itwill</url-pattern>
	</servlet-mapping>	

	<!-- Spring Framework에서 제공하는 Front Controller 클래스(DispatcherServlet)를 이용하여 서블릿 등록 -->
	<!-- Front Controller 역활의 서블릿을 여러 개 등록 가능 -->
	<!-- => Front Controller 요청에 대한 URL 패턴을 다르게 설정 -->
	<servlet>
		<servlet-name>springMvcServlet</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<!-- init-param : 클래스에 필요한 정보를 제공하기 위한 엘리먼트 -->
		<!-- DispatcherServlet 클래스에게 Bean Configuration File의 경로 전달 -->
		<!-- => DispatcherServlet 클래스가 WebApplicationContext 인스턴스를 생성하여 
		        Bean Configuration File 파일을 읽어 Spring Bean 생성 -->
		<!-- Bean Configuration File 여러 개 설정 가능 -->        
		<!-- => 파일을 엔터 또는 , 또는 ;을 이용하여 구분 -->
		<!-- => Annotation 기반의 Bean Configuration File을 선언할 경우 다른 파일 설정 불가능  -->        
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>
				/WEB-INF/springMvcServlet/spring-context1.xml
				/WEB-INF/springMvcServlet/spring-context2.xml
			</param-value>
		</init-param>
		<load-on-startup>1</load-on-startup>		
	</servlet>
	
	<servlet-mapping>
		<servlet-name>springMvcServlet</servlet-name>
		<url-pattern>*.do</url-pattern>
	</servlet-mapping>

	<!-- The definition of the Root Spring Container shared by all Servlets and Filters -->
	<!-- ContextLoaderListener 클래스에서 읽는 Bean Configuration File 설정 -->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>/WEB-INF/spring/root-context.xml</param-value>
	</context-param>
	
	<!-- Creates the Spring Container shared by all Servlets and Filters -->
	<!-- listener : WAS 실행시 리스너 클래스를 인스턴스로 생성하기 위한 상위 엘리먼트 -->
	<!-- => 컨텍스트의 모든 자원에게 인스턴스를 제공하기 위한 엘리먼트 -->
	<listener>
		<!-- listener-class : Listener 클래스를 인스턴스로 생성하기 위한 엘리먼트 -->
		<!-- Listener 클래스 : ServletContextListener 인터페이스는 상속 받아 작성 -->
		<!-- => contextInitialized() 메소드 : Listener 클래스로 인스턴스 생성 후 호출되는 메소드(WAS 실행시 초기화 작업)  -->
		<!-- => contextDestoryed() 메소드 :  Listener 인스턴스 소멸 전 호출되는 메소드(WAS 종료시 마무리 작업) -->
		<!-- ContextLoaderListener 클래스 : WebApplicationContext(Spring Container)를 이용해 Bean Configuration
		File을 읽어 Spring Bean으로 등록하여 컨텍스트의 모든 자원에서 사용하도록 제공하는 클래스 -->
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>

	<!-- Processes application requests -->
	<servlet>
		<servlet-name>appServlet</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<!-- Annotation 기반의 Bean Configuration File -->
			<param-value>/WEB-INF/spring/appServlet/servlet-context.xml</param-value>
		</init-param>
		<load-on-startup>2</load-on-startup>
	</servlet>
		
	<servlet-mapping>
		<servlet-name>appServlet</servlet-name>
		<!-- url-pattern 엘리먼트 내용을 /로 설정한 경우 모든 요청을 서블릿이 받아 처리 -->
		<url-pattern>/</url-pattern>
	</servlet-mapping>

</web-app>
