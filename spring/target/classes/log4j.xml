<?xml version="1.0" encoding="UTF-8"?>
<!-- log4j : 기록장치에 원하는 형태로 기록(로그)을 제공하기 위한 프로그램 -->
<!-- => log4j.xml 파일을 이용하여 기록 관련 정보를 제공  -->
<!DOCTYPE log4j:configuration PUBLIC "-//APACHE//DTD LOG4J 1.2//EN" "http://logging.apache.org/log4j/1.2/apidocs/org/apache/log4j/xml/doc-files/log4j.dtd">
<log4j:configuration xmlns:log4j="http://jakarta.apache.org/log4j/">
	<!-- Appenders -->
	<!-- appender : 로그의 전달방식(기록장치) 및 로그형식을 설정하는 상위 엘리먼트 -->
	<!-- name 속성 : 기록자(Appender)의 이름(고유값)을 속성값으로 설정 -->
	<!-- class 속성 : Appender 클래스를 속성값으로 설정 - 기록장치 관련 클래스 -->
	<!-- => http://logging.apache.org/log4j/1.2/apidocs/ 참조 -->
	<appender name="console" class="org.apache.log4j.ConsoleAppender">
		<!-- param : Appender 인스턴스를 생성에 필요한 정보를 전달하는 엘리먼트 -->
		<!-- => Appender 클래스에 따라 전달하는 이름과 값이 다르게 설정 -->
		<param name="Target" value="System.out" />
		<!-- layout : Appender 인스턴스로 기록하는 형식을 설정하는 엘리먼트 -->
		<!-- class 속성 : Layout 클래스를 속성값으로 설정 -->
		<layout class="org.apache.log4j.PatternLayout">
			<!-- param : Layout 인스턴스 생성에 필요한 정보를 전달하는 엘리먼트 -->
			<!-- => Layout 클래스에 따라 전달하는 이름과 값이 다르게 설정 -->
			<!-- => Conversion Character에 의해 로그 패턴이 설정  -->
			<!-- 
			%c : 패키지가 포함된 클래스명을 전달하여 기록 - {정수}를 이용하여 원하는 형식으로 전달하여 전달 => ex) %c{1} : 패키지를 제외한 클래스명 전달
			%d : 날짜와 시간을 전달하여 기록 = {SimpleDateFormatPattern}을 이용하여 원하는 형식으로 전달하여 기록 => ex) %d{HH:mm:ss} : 시간정보 전달
			%m : 로그 메세지 전달하여 기록
			%M : 호출 메소드명을 전달하여 기록
			%n : 엔터(Enter)를 전달하여 기록 - 로그 줄바꿈
			%p : 로그이벤트 전달하여 기록 - 로그이벤트 : TRACE > DEBUG > INFO > WARN > ERROR > FATAL
			%r : 처리 시간 전달하여 기록
			%t : 처리 스레드명을 전달하여 기록
			-->
			<!-- 로그 패턴에 기록 자릿수 설정 -->
			<!-- => %p : 로그이벤트의 길이만큼 자릿수 제공(오른쪽 정렬) -->
			<!-- => %자릿수p : 로그이벤트에 최대 자릿수 제공(오른쪽 정렬) -->
			<!-- => %.자릿수p : 로그이벤트에 최소 자릿수 제공(오른쪽 정렬) -->
			<!-- => %-자릿수p : 로그이벤트에 최대 자릿수 제공(왼쪽 정렬) -->
			<param name="ConversionPattern" value="%-5p: %c - %m%n" />
		</layout>
	</appender>
	
	<appender name="example" class="org.apache.log4j.ConsoleAppender">
		<param name="Target" value="System.out" />
		<layout class="org.apache.log4j.PatternLayout">
			<param name="ConversionPattern" value="%c{1} 클래스의 %M 메소드 - %m%n" />
		</layout>
	</appender>
	
	<appender name="dailyLogFile" class="org.apache.log4j.DailyRollingFileAppender">
		<param name="File" value="daily.log"/>
		<param name="DatePattern" value=".yyyy-MM-dd"/>
		<layout class="org.apache.log4j.PatternLayout">
			<param name="ConversionPattern" value="[%d{HH:mm:ss}]%-5p : %c - %m%n"/>
		</layout>
	</appender>
	
	<!-- Application Loggers -->
	<!-- logger : 특정 패키지의 클래스에서 발생되는 로그를 설정하기 위한 엘리먼트 -->
	<!-- name 속성 : 로그를 사용할 패키지명을 속성값으로 설정 -->
	<!-- additivity 속성 : 상위 logger에게 이벤트 전달 유무(false, true)를 속성값으로 설정 -->
	<!-- => false : 이벤트 미전달, true : 이벤트 전달(기본) -->
	<logger name="site.itwill.controller">
		<!-- level : 로그이벤트 설정하는 엘리먼트 -->
		<!-- value 속성 : 로그이벤트를 속성값으로 설정 -->
		<level value="info" />
		<!-- appender-ref : 사용하고자 하는 Appender를 설정하는 엘리먼트 -->
		<!-- ref 속성 :  Appender 고유값 속성값으로 설정 -->
		<!-- <appender-ref ref="console"/> -->
	</logger>
	
	<!-- 3rdparty Loggers -->
	<logger name="org.springframework.core">
		<level value="info" />
	</logger>
	
	<logger name="org.springframework.beans">
		<level value="info" />
	</logger>
	
	<logger name="org.springframework.context">
		<level value="info" />
	</logger>

	<logger name="org.springframework.web">
		<level value="info" />
	</logger>
	
	<logger name="site.itwill00.log" additivity="false">
		<level value="info"/>
		<appender-ref ref="example"/>
		<appender-ref ref="dailyLogFile"/>
	</logger>

	<logger name="site.itwill07.aop">
		<level value="info"/>
	</logger>
	
	<logger name="site.itwill10.controller">
		<level value="info"/>
	</logger>
	
	<!-- jdbc.sqlonly : 완성된 SQL 명령 기록 -->
	<logger name="jdbc.sqlonly">
		<level value="info"/>
	</logger>
	
	<!-- jdbc.sqltiming : SQL 명령에 대한 실행시간(ms) 기록 -->
	<logger name="jdbc.sqltiming">
		<level value="info"/>
	</logger>
	
	<!-- jdbc.adult : ResultSet 관련 정보를 제외한 모든 JDBC 관련 정보 기록 -->
	<logger name="jdbc.adult">
		<level value="info"/>
	</logger>
	
	<!-- jdbc.resultset : ResultSet 관련 정보를 포함한 모든 JDBC 관련 정보 기록 -->
	<!--  
	<logger name="jdbc.resultset">
		<level value="info"/>
	</logger>
	-->
	
	<!-- jdbc.resultsettable : SELECT 명령의 실행 결과로 검색된 데이타 테이블의 정보 기록 -->
	<logger name="jdbc.resultsettable">
		<level value="info"/>
	</logger>
	
	<!-- jdbc.connection : Connection 인스턴스의 Open 및 Close 정보 기록 -->
	<logger name="jdbc.connection">
		<level value="info"/>
	</logger>
	
	<!-- Root Logger -->
	<!-- root : 최상위 Logger를 설정하기 위한 엘리먼트 -->
	<!-- => Logger 설정이 없는 패키지에 기본적으로 적용하는 Logger -->
	<!-- => 모든 Logger에 기본적인 정보를 제공 -->
	<root>
		<!-- priority : level 엘리먼트와 동일한 역활을 제공하는 엘리먼트 -->
		<priority value="warn" />
		<appender-ref ref="console" />
	</root>
</log4j:configuration>
