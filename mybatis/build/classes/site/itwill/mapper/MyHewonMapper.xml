<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="site.itwill.mapper.MyHewonMapper">
	<insert id="insertHewon" parameterType="MyHewon">
		insert into myhewon values(#{id},#{name},#{phone},#{email},#{state})
	</insert>
	
	<resultMap type="MyHewon" id="myHewonResultMap">
		<id column="hewon_id" property="id"/>
		<result column="hewon_name" property="name"/>
		<result column="hewon_phone" property="phone"/>
		<result column="hewon_email" property="email"/>
		<result column="hewon_state" property="state"/>
	</resultMap>
	
	<select id="selectHewonList" resultMap="myHewonResultMap">
		select * from myhewon order by hewon_id
	</select>
	
	<!-- 공개범위에 따라 매핑정보를 다르게 제공하도록 설정 -->
	<resultMap type="MyHewon" id="myHewonDiscriminatorResultMap">
		<!-- discriminator : 검색행의 컬럼값을 비교하여 다른 매핑정보를 제공하기 위한 엘리먼트 -->
		<!-- javaType 속성 : 비교를 위한 검색행의 컬럼값에 대한 자료형을 속성값으로 설정 -->
		<!-- column 속성 : 비교를 위한 검색행의 컬럼명을 속성값으로 설정 -->
		<!-- <discriminator javaType="int" column="hewon_state">  -->
			<!-- case : 값을 비교하여 같은 경우 매핑정보를 제공하는 엘리먼트 -->
			<!-- value 속성 : 비교값을 속성값으로 설정 -->
		<!-- 
			<case value="1">
				<id column="hewon_id" property="id"/>
				<result column="hewon_state" property="state"/>
			</case>
			<case value="2">
				<id column="hewon_id" property="id"/>
				<result column="hewon_name" property="name"/>
				<result column="hewon_state" property="state"/>
			</case>
			<case value="3">
				<id column="hewon_id" property="id"/>
				<result column="hewon_name" property="name"/>
				<result column="hewon_phone" property="phone"/>
				<result column="hewon_state" property="state"/>
			</case>
			<case value="4">
				<id column="hewon_id" property="id"/>
				<result column="hewon_name" property="name"/>
				<result column="hewon_phone" property="phone"/>
				<result column="hewon_email" property="email"/>
				<result column="hewon_state" property="state"/>
			</case>
		</discriminator>
		-->
		
		<!-- 공통된 매핑정보는 discriminator 엘리먼트 외부에서 설정 -->
		<!-- 	
		<id column="hewon_id" property="id"/>
		<result column="hewon_state" property="state"/>
		<discriminator javaType="int" column="hewon_state">	
			<case value="2">
				<result column="hewon_name" property="name"/>
			</case>
			<case value="3">
				<result column="hewon_name" property="name"/>
				<result column="hewon_phone" property="phone"/>
			</case>
			<case value="4">
				<result column="hewon_name" property="name"/>
				<result column="hewon_phone" property="phone"/>
				<result column="hewon_email" property="email"/>
			</case>
		</discriminator>
		-->
		
		<id column="hewon_id" property="id"/>
		<result column="hewon_state" property="state"/>
		<discriminator javaType="int" column="hewon_state">
			<!-- resultMap 속성으로 다른 resultMap 엘리먼트의 매핑정보를 사용 -->
			<!-- 문제점) discriminator 엘리먼트 외부의 매핑정보 미사용 -->	
			<!-- 해결법) resultMap 속성값의 resultMap 엘리먼트에서 기존 매핑정보를 상속받아 사용  -->
			<case value="2" resultMap="myHewonTwoResultMap"/>
			<case value="3" resultMap="myHewonThreeResultMap"/>
			<case value="4" resultMap="myHewonFourResultMap"/>
		</discriminator>
	</resultMap>

	<!-- extends 속성 : resultMap 엘리먼트의 고유값을 속성값으로 설정 -->
	<!-- => 속성값으로 설정된 resultMap 엘리먼트의 매핑정보를 상속받아 사용 -->	
	<resultMap type="MyHewon" id="myHewonTwoResultMap" extends="myHewonDiscriminatorResultMap">
		<result column="hewon_name" property="name"/>
	</resultMap>
	
	<resultMap type="MyHewon" id="myHewonThreeResultMap" extends="myHewonTwoResultMap">
		<result column="hewon_phone" property="phone"/>
	</resultMap>
	
	<resultMap type="MyHewon" id="myHewonFourResultMap" extends="myHewonThreeResultMap">
		<result column="hewon_email" property="email"/>
	</resultMap>
	
	<select id="selectDiscriminatorHewonList" resultMap="myHewonDiscriminatorResultMap">
		select * from myhewon order by hewon_id
	</select>
	
	<!-- SQL 명령에 필요한 값을 전달받는 방법 -->
	<!-- 1)SQL 명령이 등록된 엘리먼트의 parameterType 속성값으로 기본형(하나) 또는 자바빈(다수)을 설정하여 값을 전달받아 사용-->
	<!-- 2)SQL 명령이 등록된 엘리먼트의 parameterType 속성값으로 map 자료형을 설정하여 값을 전달받아 사용-->
	<!-- 3)인터페이스 매퍼의 추상메소드 매개변수에 @Param 어노테이션을 이용하여 값을 전달받아 사용 -->
	
	<!-- 공개범위를 전달받아 MYHEWON 테이블에서 회원정보를 검색하여 반환하는 엘리먼트 작성 -->
	<!-- 전달받은 값은 #{변수명} 형식으로 표현 - 변수명은 전달값과 무관  -->
	<!-- 
	<select id="selectStateHewonList" parameterType="int" resultMap="myHewonResultMap">
		select * from myhewon where hewon_state=#{state} order by hewon_id
	</select>
	-->
	
	<!-- SQL 명령이 등록된 엘리먼트에서는 parameterType 속성 생략 가능 -->
	<select id="selectStateHewonList" resultMap="myHewonResultMap">
		select * from myhewon where hewon_state=#{state} order by hewon_id
	</select>
	
	<!-- 이름과 전화번호를 전달받아 MYHEWON 테이블에서 회원 아이디를 검색하여 반환하는 엘리먼트 작성 -->
	<!-- => JavaBean(DTO) 클래스의 필드값으로 전달받아 사용 -->
	<!-- => #{필드명} 형식으로 전달값 표현 - 필드에 대한 Getter 메소드 호출 -->
	<select id="selectBeanHewonId" parameterType="MyHewon" resultType="string">
		select hewon_id from myhewon where hewon_name=#{name} and hewon_phone=#{phone}
	</select>

	<!-- 이름과 전화번호를 전달받아 MYHEWON 테이블에서 회원 아이디를 검색하여 반환하는 엘리먼트 작성 -->
	<!-- => Map 인스턴스의 요소값으로 전달받아 사용 -->
	<!-- => #{맵키} 형식으로 전달값 표현 - 맵키에 대한 맵값 사용 -->
	<!-- => 자바빈 클래스가 없거나 자바빈 클래스를 사용할 경우 발생되는 자원의 낭비를 최소화 하기 위해 사용 -->
	<select id="selectMapHewonId" parameterType="map" resultType="string">
		select hewon_id from myhewon where hewon_name=#{name} and hewon_phone=#{phone}
	</select>

	<!-- 이름과 전화번호를 전달받아 MYHEWON 테이블에서 회원 아이디를 검색하여 반환하는 엘리먼트 작성 -->
	<!-- => 인터페이스 맵퍼에 추상매소드의 매개변수를 사용하므로 parameterType 속성 생략 -->
	<!-- => #{value} 형식으로 전달값 표현 - @Param 어노테이션의 value 속성값 사용하여 표현 -->	
	<select id="selectParamHewonId" resultType="string">
		select hewon_id from myhewon where hewon_name=#{name} and hewon_phone=#{phone}
	</select>
	
	<insert id="insertHewonMap" parameterType="map">
		insert into myhewon values(#{id},#{name},#{phone},#{email},#{state})
	</insert>
	
	<!-- 검색컬럼과 검색단어를 전달받아 MYHEWON 테이블의 회원정보를 검색하여 반환하는 엘리먼트 작성 -->
	<!-- #{변수명|필드명|맵키} : '전달값' - 등록된 SQL 명령에서 문자형 상수로 표현 -->
	<!-- ${변수명|필드명|맵키} : 전달값 - 등록된 SQL 명령에서 키워드 및 식별자로 표현 -->
	<!-- => ibatis에서는 $변수명|필드명|맵키$ 형식으로 표현 -->
	<!-- => $ 표현식은 InSQL 공격에 취약하므로 사용하는 것을 비권장 -->
	<!-- 
	<select id="selectSearchHewonList" parameterType="map" resultMap="myHewonResultMap">
		select * from myhewon where ${column}=#{keyword} order by hewon_id	
	</select>
	 -->
	
	<!-- 검색단어가 포함되는 컬럼값으로 검색 - like 연산자와 검색기호 이용 -->
	<!--  
	<select id="selectSearchHewonList" parameterType="map" resultMap="myHewonResultMap">
		select * from myhewon where ${column} like '%'||#{keyword}||'%' order by hewon_id	
	</select>
	-->
	
	<select id="selectSearchHewonList" parameterType="map" resultMap="myHewonResultMap">
		<!-- bind : SQL 명령에서 사용할 수 있는 변수와 변수 저장값을 설정하는 엘리먼트 -->
		<!-- name 속성 : SQL 명령에서 사용할 수 있는 변수명을 속성값으로 설정 -->
		<!-- value 속성 : 변수에 저장되는 초기값을 속성값으로 설정 -->
		<!-- => 전달값을 이용할 수 있으며 다른 문자형 상수 결합 가능(+ 연산자 이용) -->
		<bind name="word" value="'%'+keyword+'%'"/>
		select * from myhewon where ${column} like #{word} order by hewon_id	
	</select>
	
	<!-- 이름을 전달받아 MYHEWON 테이블에 저장된 회원정보를 검색하여 반환하는 엘리먼트 작성 -->
	<select id="selectNameHewonList" parameterType="string" resultMap="myHewonResultMap">
		select * from myhewon where hewon_name=#{name} order by hewon_id	
	</select>
	
	<!-- 동적 SQL : 엘리먼트에 등록되는 SQL 명령이 다르게 제공되도록 설정하는 기능 -->
	
	<!-- 이름이 전달되지 않을 경우 MYHEWON 테이블에 저장된 모든 회원정보를 검색하여 반환하고
	이름이 전달될 경우 MYHEWON 테이블에 저장된 해당 이름의 회원정보를 검색하여 반환하는 엘리먼트 작성 -->
	<!-- => 동적 SQL 기능을 이용하여 SQL 명령이 다르게 등록되도록 설정 -->
	<!-- 주의점)동적 SQL 기능을 이용할 경우 parameterType 속성값으로 자바빈 또는 맵만 설정 가능 -->
	<select id="selectNameDynamicHewonList" parameterType="map" resultMap="myHewonResultMap">
		select * from myhewon
		<!-- if : test 속성값이 true인 경우 엘리먼트 내용을 SQL 명령에 포함하는 엘리먼트 -->
		<!-- test 속성 : 필드명 또는 맵키를 이용한 조건식을 속성값으로 설정 -->
		<if test="name!=null and name!=''"> 
			where hewon_name=#{name}
		</if>	 
		order by hewon_id		
	</select>
	
	<!-- 아이디 또는 이름이 전달되지 않은 경우 MYHEWON 테이블에 저장된 모든 회원정보를 검색하여 반환하고
	아이디 또는 이름이 전달될 경우 MYHEWON 테이블에 저장된 해당 아이디 또는 이름의 회원정보를 검색하여 반환하는 엘리먼트 작성 -->
	<!-- 문제점)아이디와 이름을 같이 입력할 경우 에러 발생 - SQL 명령 오류 -->
	<!-- => if 엘리먼트의 test 속성값이 모두 true이므로 where 구문이 2번 포함 -->
	<!-- 
	<select id="selectDynamicHewonList" parameterType="map" resultMap="myHewonResultMap">
		select * from myhewon
		<if test="id!=null and id!=''"> 
			where hewon_id=#{id}
		</if>
		<if test="name!=null and name!=''"> 
			where hewon_name=#{name}
		</if>	 
		order by hewon_id
	</select>
	-->	
	
	<!-- 해결법-1)아이디와 이름을 같이 입력해도 하나의 where 구분만 포함 -->
	<!-- => 첫번째 조건에 맞는 엘리먼트에 대한 where 구문 하나만 포함 -->
	<!-- choose : 하위 엘리먼트 하나의 SQL 명령이 포함되도록 설정하는 상위 엘리먼트 -->
	<!-- when : test 속성값이 true인 경우 엘리먼트 내용(SQL 명령)을 포함하는 엘리먼트 : 1개 이상 -->
	<!-- otherwise : 모든 when 엘리먼트의 test 속성값이 false인 경우 엘리먼트 내용(SQL 명령)을 포함하는 엘리먼트 : 0개 또는 1개 -->
	<!-- 
	<select id="selectDynamicHewonList" parameterType="map" resultMap="myHewonResultMap">
		select * from myhewon
		<choose>
			<when test="id!=null and id!=''"> 
				where hewon_id=#{id}
			</when>
			<when test="name!=null and name!=''"> 
				where hewon_name=#{name}
			</when>	
		</choose> 
		order by hewon_id
	</select>
	-->
	
	<!-- 해결법-2)trim 엘리먼트를 이용하여 SQL 명령을 변형하여 포함 -->
	<!-- trim : SQL 명령을 추가하거나 제거하는 기능을 제공하는 엘리먼트 -->
	<!-- => 하위 엘리먼트로 if 엘리먼트 또는 choose 엘리먼트 사용 -->
	<!-- prefix 속성 : trim 엘리먼트에 SQL 명령이 존재할 경우 앞부분에 추가될 SQL 명령을 속성값으로 설정 -->
	<!-- prefixOverrides 속성 : trim 엘리먼트에 SQL 명령이 존재할 경우 제거하기 위한 앞부분의 SQL 명령을 속성값으로 설정 -->
	<!-- suffix 속성 : trim 엘리먼트에 SQL 명령이 존재할 경우 뒤부분에 추가될 SQL 명령을 속성값으로 설정 -->
	<!-- suffixOverrides 속성 : trim 엘리먼트에 SQL 명령이 존재할 경우 제거하기 위한 뒤부분의 SQL 명령을 속성값으로 설정 -->
	<!-- 
	<select id="selectDynamicHewonList" parameterType="map" resultMap="myHewonResultMap">
		select * from myhewon
		<trim prefix="where" prefixOverrides="and|or">		
			<if test="id!=null and id!=''"> 
				hewon_id=#{id}
			</if>
			<if test="name!=null and name!=''"> 
				${choice} hewon_name=#{name}
			</if>
		</trim>	 
		order by hewon_id
	</select>
	-->

	<!-- where : SQL 명령 앞부분에 where 구분을 추가하는 엘리먼트 -->
	<!-- => where 구문 뒤에 존재하는 명령이 조건식이 아닌 경우 제거 -->
	<!-- => 하위 엘리먼트로 if 엘리먼트 또는 choose 엘리먼트 사용 -->
	<select id="selectDynamicHewonList" parameterType="map" resultMap="myHewonResultMap">
		select * from myhewon
		<where>		
			<if test="id!=null and id!=''"> 
				hewon_id=#{id}
			</if>
			<if test="name!=null and name!=''"> 
				${choice} hewon_name=#{name}
			</if>
		</where>	 
		order by hewon_id
	</select>
	
	<!-- 회원정보를 전달받아 MYHEWON 테이블에 저장된 해당 회원정보를 변경하는 명령이 등록된 엘리먼트 -->
	<!-- => 자바빈 필드에 저장된 변경값을 이용하여 아이디를 제외한 모든 회원의 컬럼값 변경 -->
	<update id="updateHewon" parameterType="MyHewon">
		update myhewon set hewon_name=#{name},hewon_phone=#{phone}
			,hewon_email=#{email},hewon_state=#{state} where hewon_id=#{id}
	</update>
	
	<!-- 회원정보를 전달받아 MYHEWON 테이블에 저장된 해당 회원정보를 변경하는 명령이 등록된 엘리먼트 -->
	<!-- => 변경값을 있는 자바빈 필드만을 이용하여 회원의 컬럼값 변경 -->
	<!-- 	
	<update id="updateDynamicHewon" parameterType="MyHewon">
		update myhewon
		<trim prefix="set" suffixOverrides=",">
			<if test="name!=null and name!='비공개'">
				hewon_name=#{name},
			</if>
			<if test="phone!=null and phone!='비공개'">
				hewon_phone=#{phone},
			</if>
			<if test="email!=null and email!='비공개'">
				hewon_email=#{email},
			</if>
			<if test="state!=null and state!=0">
				hewon_state=#{state}
			</if>
		</trim>
		where hewon_id=#{id}
	</update>
	-->
	
	<!-- set : SQL 명령 앞부분에 set 구분을 추가하는 엘리먼트 -->
	<!-- => set 엘리먼트 명령 뒤부분에 존재하는 명령이 조건식이 아닌 경우 , 제거 -->
	<update id="updateDynamicHewon" parameterType="MyHewon">
		update myhewon
		<set>
			<if test="name!=null and name!='비공개'">
				hewon_name=#{name},
			</if>
			<if test="phone!=null and phone!='비공개'">
				hewon_phone=#{phone},
			</if>
			<if test="email!=null and email!='비공개'">
				hewon_email=#{email},
			</if>
			<if test="state!=null and state!=0">
				hewon_state=#{state}
			</if>
		</set>
		where hewon_id=#{id}
	</update>
	
	<!-- List 인스턴스(아이디 목록)을 전달받아 MYHEWON 테이블에 저장된 회원정보를 검색하여 반환하는 엘리먼트 작성 -->
	<!-- => List 인스턴스가 전달되지 않을 경우 모든 회원정보를 검색하여 반환 -->
	<select id="selectDynamicMultiHewonList" parameterType="list" resultMap="myHewonResultMap">
		select * from myhewon 
		<!-- 전달값이 List 인스턴스인 경우 변수명을 list으로 사용 -->
		<if test="list!=null">
			where hewon_id in
			<!-- foreach : 엘리먼트 내용으로 등록된 SQL 명령을 반복적으로 포함하기 위한 엘리먼트 -->
			<!-- collection 속성 : 반복처리 하고자 하는 List 인스턴스 변수명을 속성값으로 설정 -->
			<!-- item 속성 : List 인스턴스의 요소를 저장하기 위한 변수명을 속성값 설정 -->
			<!-- open 속성 : 엘리먼트 내용 앞부분에 추가될 명령을 속성값으로 설정 -->			
			<!-- close 속성 : 엘리먼트 내용 뒤부분에 추가될 명령을 속성값으로 설정 -->
			<!-- separator 속성 : 반복 처리될 경우 명령을 구분하는 구분자를 속성으로 설정 -->			
			<foreach collection="list" item="id" open="(" close=")" separator=",">
				#{id}
			</foreach>
		</if>
		order by hewon_id	
	</select>
</mapper>







